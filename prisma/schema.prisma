// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  groupId       String?
  accounts      Account[]
  sessions      Session[]
  group         Group?    @relation(fields: [groupId], references: [id])
  registrations Registration[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Itinerary {
  id          String   @id @default(cuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  price       Float
  capacity    Int
  location    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  registrations Registration[]
  formId      String?
  form        Form?    @relation(fields: [formId], references: [id])
}

model Registration {
  id          String    @id @default(cuid())
  userId      String
  itineraryId String
  status      RegStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  formData    Json?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
}

model Group {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  users     User[]
}

model Form {
  id         String      @id @default(cuid())
  title      String
  fields     Json
  createdAt  DateTime    @default(now())
  itineraries Itinerary[]
}

enum Role {
  USER
  ADMIN
}

enum RegStatus {
  PENDING
  APPROVED
  REJECTED
}